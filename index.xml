<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://jroberts.io/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 06 Apr 2018 00:36:10 +0000</lastBuildDate>
    
	<atom:link href="https://jroberts.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AppSec Threat Modeling</title>
      <link>https://jroberts.io/post/threat-modeling/</link>
      <pubDate>Fri, 06 Apr 2018 00:36:10 +0000</pubDate>
      
      <guid>https://jroberts.io/post/threat-modeling/</guid>
      <description>Threat modeling underpins risk-based application security. What is threat modeling? According to TechTarget:
 Threat modeling is a procedure for optimizing network security by identifying objectives and vulnerabilities, and then defining countermeasures to prevent, or mitigate the effects of, threats to the system.
 That definition emphasizes network security. The concept applies to other kinds of security &amp;ndash; application, infrastructure, physical, etc.
Why does threat modeling matter? It grounds security in technical and business risk.</description>
    </item>
    
    <item>
      <title>Container Security Part V</title>
      <link>https://jroberts.io/post/containersec-links/</link>
      <pubDate>Mon, 02 Apr 2018 22:28:30 +0000</pubDate>
      
      <guid>https://jroberts.io/post/containersec-links/</guid>
      <description>This is the fifth post in a series on container security. Check out the first post for context and links to the rest of the series.
Want to go deeper on container security? Check out the links below.
Docker Security Links  Docker&amp;rsquo;s security documentation Docker&amp;rsquo;s security best practices focusing on Docker Enterprise Edition Docker&amp;rsquo;s reference architectures are a collection of reference architectures/design patterns, demonstrating best practices for a variety of use cases Docker seccomp lab GDS Security&amp;rsquo;s Docker Secure Deployment Guidelines, a checklist for securing Docker deployments Docker Bench for Security is a script (and container) that checks Docker deployments against a variety of security best practices  Kubernetes Security Links K8s is a popular container orchestration platform, here are some handy links for securing it.</description>
    </item>
    
    <item>
      <title>Container Security Part IV</title>
      <link>https://jroberts.io/post/containersec-p4/</link>
      <pubDate>Mon, 02 Apr 2018 00:52:32 +0000</pubDate>
      
      <guid>https://jroberts.io/post/containersec-p4/</guid>
      <description>This is the fourth post in an intro series on container security. Check out the first post for context and links to the rest of the series.
This post covers best practices for teams that are willing to invest significant time and resources in securing their containers. These practices may involve substantial trade-offs between development velocity and security.
Higher-Effort Best Practices Whitelist required system calls per-container with seccomp: protect container hosts and isolate containers from each other by tailoring seccomp security profiles to individual containers.</description>
    </item>
    
    <item>
      <title>Container Security Part III</title>
      <link>https://jroberts.io/post/containersec-p3/</link>
      <pubDate>Mon, 02 Apr 2018 00:52:18 +0000</pubDate>
      
      <guid>https://jroberts.io/post/containersec-p3/</guid>
      <description>This is the third post in an intro series on container security. Check out the first post for context and links to the rest of the series.
This post covers best practices that reduce risk substantially in exchange for decent (but generally manageable) level-of-effort. Of course, this varies with your workload and environment &amp;ndash; consider these practices once you&amp;rsquo;ve got the basics down.
Medium-Effort Best Practices Restrict required kernel capabilities per-container: move beyond the binary root/non-root privilege model by selectively granting individual containers access to the kernel capabilities they need with the --cap-add and --cap-drop flags for docker run.</description>
    </item>
    
    <item>
      <title>Container Security Part II</title>
      <link>https://jroberts.io/post/containersec-p2/</link>
      <pubDate>Mon, 02 Apr 2018 00:52:06 +0000</pubDate>
      
      <guid>https://jroberts.io/post/containersec-p2/</guid>
      <description>This is the second post in an intro series on container security. Check out the first post for context and links to the rest of the series.
This post covers key container risks and best practices, focusing on techniques that reduce risk substantially for the least engineering effort. It&amp;rsquo;s a good starting point for securing your container workloads.
Privilege Risks &amp;amp; Best Practices The Docker daemon runs as root. By default, Docker containers run as root, and containers running as root are common in practice.</description>
    </item>
    
    <item>
      <title>Bio</title>
      <link>https://jroberts.io/bio/</link>
      <pubDate>Mon, 26 Mar 2018 16:27:06 +0000</pubDate>
      
      <guid>https://jroberts.io/bio/</guid>
      <description>Hi there! My name&amp;rsquo;s John Roberts, I run Arcta Security where I help clients secure their AWS environments and web applications. You can find me @DaChiefJustice, on GitHub, or on LinkedIn.
Before ArctaSec, I was a security consultant with Cigital (a software security firm acquired by Synopsys). Some highlights of my work:
 Led, scoped, and delivered web app/API penetration testing, network penetration testing, design/architecture analysis, and red team engagements Designed &amp;amp; delivered a service to analyze the security of client AWS environments, built it into a repeatable service offering, and trained other consultants on delivery Led creation and delivery of a workshop for DevOps and security teams (focused on AWS, Docker, and infrastructure-as-code security)  Before Cigital, I worked as a network and systems administrator at a startup.</description>
    </item>
    
    <item>
      <title>Container Security Part I</title>
      <link>https://jroberts.io/post/containersec-background/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jroberts.io/post/containersec-background/</guid>
      <description>Containerization has exploded in popularity across the tech scene in recent years, driven by Docker and container orchestration platforms like Kubernetes. Containers are a natural fit for microservice-based applications and for CI/CDÂ² pipeline tasks. They power event-driven function-as-a-service (&amp;ldquo;serverless&amp;rdquo;) platforms like AWS Lambda and Apache OpenWhisk.
Containerization offers substantial benefits, much discussed across the tech world. Avoiding vendor lock-in, environment consistency, application portability, rapid deployment/scaling, deployment density &amp;ndash; a range of business and technical benefits is likely to drive continued adoption.</description>
    </item>
    
    <item>
      <title>Flow Music</title>
      <link>https://jroberts.io/post/flow-music/</link>
      <pubDate>Tue, 20 Mar 2018 21:33:15 +0000</pubDate>
      
      <guid>https://jroberts.io/post/flow-music/</guid>
      <description>What helps you get &amp;ldquo;in the zone&amp;rdquo; or into a &amp;ldquo;flow state&amp;rdquo;? Music does! This post links to some of my favorite music for concentration, maybe you&amp;rsquo;ll find something you like.
Thanks to a musical upbringing, my tastes are all over the place. Quoting the great Duke Ellington:
 There are two kinds of music. Good music, and the other kind.
 Genre doesn&amp;rsquo;t matter, so long as the music&amp;rsquo;s good!</description>
    </item>
    
    <item>
      <title>AppSec Strategy</title>
      <link>https://jroberts.io/post/appsec-strategy/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jroberts.io/post/appsec-strategy/</guid>
      <description>Application security teams face a daunting challenge: finding and fixing security issues across their application portfolio, based on risk. Application portfolios tend to grow over time through acquisitions, partnerships, and in response to evolving business needs. New app development, COTS app deployment, and SaaS app/service adoption also expand the portfolio.
Manual security efforts such as penetration testing, code review, and design analysis are a great start, but scale poorly across large application portfolios.</description>
    </item>
    
  </channel>
</rss>